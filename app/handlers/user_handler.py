from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types.input_media_photo import InputMediaPhoto

from app.keyboards.reply_kb import *
from app.keyboards.inline_kb import *
from app.database.requests import *
from app.FSM.fsm import Location1, Location2

import config

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    user = await chek_user(message.from_user.id, message.from_user.first_name)
    if not user:
        if await add_user(message.from_user.id, message.from_user.first_name):
            await message.answer('–í–∞—Å –ø—Ä–∏–º–µ—Å—Ç–≤—É–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω <b>FAST FOOD STORE</b>\n\n', reply_markup=await kb_menu())
            await message.bot.send_message(chat_id=config.ADMIN_ID, text=f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.from_user.first_name}', reply_markup=await new_user(message.from_user.id, message.from_user.first_name))
        else:
            await message.answer('–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: https://t.me/korets_24')
    else:
        await message.answer('–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –º—ã —Ä–∞–¥—ã –≤–Ω–æ–≤—å –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ <b>FAST FOOD STORE</b>\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –º–µ–Ω—é ‚¨áÔ∏è', reply_markup=await kb_menu())

@router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π!'
    )

@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ'
    )
    await state.clear()


@router.message(F.text.endswith('–ú–µ–Ω—é'))
async def cmd_categories_product(message: Message):
    if await output_categories():
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await user_categories())
    else:
        await message.answer('–ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç', reply_markup=await kb_menu())

@router.callback_query(F.data == 'bat_categ')
async def cmd_categ_back(callback: CallbackQuery):
    if await output_categories():
        await callback.message.delete()
        await callback.message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await user_categories())
        await callback.answer()
    else:
        await callback.message.answer('–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ‚¨áÔ∏è')

@router.callback_query(F.data.startswith('user_categ '))
async def cmd_fast_food(callback: CallbackQuery):
    await callback.message.delete()
    item = await output_fast_food(int(callback.data.split()[-1]))
    if item:
        await callback.message.answer_photo(item[0][1], caption=f"<b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[0][0]}  \n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</i></b> {item[0][2]}\n\n<b><i>–ü—Ä–∞–π—Å:</i></b> {item[0][3]} RUB", reply_markup=await add_cart(int(callback.data.split()[-1]), item[0][4]))
        await callback.answer()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ')
        await callback.answer()


@router.callback_query(F.data.startswith('forward'))
async def cmd_fast_food(callback: CallbackQuery):
    categ_id = int(callback.data.split('_')[-2])
    index = int(callback.data.split('_')[-1])
    item = await output_fast_food(categ_id)
    if item:
        if index < len(item) - 1:
            index += 1
            await callback.message.edit_media(media=InputMediaPhoto(media=item[index][1]))
            await callback.message.edit_caption(caption=f"<b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[index][0]}  \n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</i></b> {item[index][2]}\n\n<b><i>–ü—Ä–∞–π—Å:</i></b> {item[index][3]} RUB", reply_markup=await add_cart(categ_id, item[index][4], index))
            await callback.answer()
        else:
            await callback.message.edit_media(media=InputMediaPhoto(media=item[0][1]))
            await callback.message.edit_caption(caption=f"<b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[0][0]}  \n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</i></b> {item[0][2]}   \n\n<b><i>–ü—Ä–∞–π—Å:</i></b> {item[0][3]} RUB", reply_markup=await add_cart(categ_id, item[0][4]))
            await callback.answer()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ')
        await callback.answer()

@router.callback_query(F.data.startswith('back'))
async def cmd_fast_food(callback: CallbackQuery):
    categ_id = int(callback.data.split('_')[-2])
    index = int(callback.data.split('_')[-1])
    item = await output_fast_food(categ_id)
    if item:
        if index > 0:
            index -= 1
            await callback.message.edit_media(media=InputMediaPhoto(media=item[index][1]))
            await callback.message.edit_caption(caption=f"<b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[index][0]}  \n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</i></b> {item[index][2]}\n\n<b><i>–ü—Ä–∞–π—Å:</i></b> {item[index][3]} RUB", reply_markup=await add_cart(categ_id, item[index][4], index))
            await callback.answer()
        else:
            await callback.message.edit_media(media=InputMediaPhoto(media=item[-1][1]))
            await callback.message.edit_caption(caption=f"<b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[-1][0]}  \n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</i></b> {item[-1][2]}   \n\n<b><i>–ü—Ä–∞–π—Å:</i></b> {item[-1][3]} RUB", reply_markup=await add_cart(categ_id, item[-1][4], len(item) - 1))
            await callback.answer()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ')
        await callback.answer()

@router.callback_query(F.data.startswith('count.value'))
async def count_quanty(callback: CallbackQuery):
    current_value = int(callback.data.split('_')[-2])
    categ = int(callback.data.split('_')[-1])
    await callback.answer(text=f'–¢–æ–≤–∞—Ä ‚Ññ{current_value} –∏–∑ {categ}', show_alert=True)
    await callback.answer()

@router.message(F.text.endswith('–ö–æ—Ä–∑–∏–Ω–∞'))
async def cmd_cart(message: Message):

    items = await check_user_cart(message.from_user.id)
    if items:
        lst_menu = []
        for item in items:
            parser_product_attr = await pars_product(item[0])
            lst_menu.append(parser_product_attr)

        content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} —à—Ç. —Ö {item[0][1]} = {item [1] * item[0][1]} BYN" for item in lst_menu])
        total_cost = sum([i[1] * i[0][1] for i in lst_menu])
        name_count_product = [(item[0][0], item[1]) for item in lst_menu]

        await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await kb_menu_cart(name_count_product))
        
    else:
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä', reply_markup=await kb_menu())

#–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@router.message(F.text.startswith('‚ùå'))
async def cmd_delete_product(message: Message):
    name = message.text.split('.')[1]
    if await count_minus(name):
        items = await check_user_cart(message.from_user.id)
        if items:
            lst_menu = []
            for item in items:
                parser_product_attr = await pars_product(item[0])
                lst_menu.append(parser_product_attr)

            content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} —à—Ç. —Ö {item[0][1]} = {item [1] * item[0][1]} BYN" for item in lst_menu])
            total_cost = sum([i[1] * i[0][1] for i in lst_menu])
            name_count_product = [(item[0][0], item[1]) for item in lst_menu]

            await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await kb_menu_cart(name_count_product))
        else:
            await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä')
    else:
        if await delete_menu_product(name):
            items = await check_user_cart(message.from_user.id)
            if items:
                lst_menu = []
                for item in items:
                    parser_product_attr = await pars_product(item[0])
                    lst_menu.append(parser_product_attr)

                content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} —à—Ç. —Ö {item[0][1]} = {item[1] * item[0][1]} BYN" for item in lst_menu])
                total_cost = sum([i[1] * i[0][1] for i in lst_menu])
                name_count_product = [(item[0][0], item[1]) for item in lst_menu]

                await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await  kb_menu_cart(name_count_product))
            else:
                await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä', reply_markup=await kb_menu())

@router.message(F.text.endswith('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
async def clear_cart(message: Message):
    if await clear_cart_pr(message.from_user.id):
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞, –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—ë–¥–∏—Ç–µ –≤ üìã –ú–µ–Ω—é)', reply_markup=await kb_menu())
    else:
        await message.answer('–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É [ü§ù –ü–æ–º–æ—â—å]')
    

#–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–µ–Ω—å—à–µ –µ–¥–µ–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤—É
@router.callback_query(F.data.endswith('minus'))
async def cmd_minus(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await minus_count_product(id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
    else:
        await delete_cart(callback.from_user.id, id_product)
        await callback.message.edit_reply_markup(reply_markup=await add_cart(id_categ, id_product, index))

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10 —à—Ç.
@router.callback_query(F.data.endswith('plus'))
async def cmd_minus(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await plus_count_product(id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
    else:
        await callback.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10 —à—Ç.')

@router.callback_query(F.data.endswith('count'))
async def cmd_minus(callback: CallbackQuery):
    check_count = await check_quantuty(int(callback.data.split()[0]))
    await callback.answer(f'–£ –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ üõí {check_count} —à—Ç.')
    await callback.answer()


#–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–ª–∞–≤–∞
@router.callback_query(F.data.endswith('add_cart'))
async def cmd_add_cart(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await add_cart_product(callback.from_user.id, id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
        await callback.answer(text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    else:
        await callback.answer('–¢–æ–≤–∞—Ä —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert=True)
    

@router.message(F.text.endswith('–ü–æ–º–æ—â—å'))
async def cmd_help(message: Message):
    await message.answer('üî∏–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?\n–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º!\n', reply_markup=kb_help)


#–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
@router.message(F.text.endswith('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'))
async def place_an_order(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=payment_kb)

@router.callback_query(StateFilter(default_state), F.data == 'order1')
async def manual_address(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Location1.street)
    await callback.answer()

@router.message(StateFilter(Location1.street))
async def user_street(message: Message, state: FSMContext):
    await state.update_data(street=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Location1.house)

@router.message(StateFilter(Location1.house))
async def user_house(message: Message, state: FSMContext):  
    await state.update_data(house=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Location1.flat)

@router.message(StateFilter(Location1.flat))
async def payment_by_card(message: Message, state: FSMContext):
    await state.update_data(flat=message.text)
    address = await state.get_data()
    payment_con = await payment_cart(message.from_user.id)
    quantity = [item[1] for item in payment_con]
    content = [await product_name_desc_price(item[0]) for item in payment_con]
    price = [item[0][1] for item in content]
    name_prod = [item[0][0] for item in content]
    desc_name_quantity = dict(zip(name_prod, quantity))
    total_cost = sum([float(i * quantity[idx])  for idx, i in enumerate(price)])
    address_d = f'{address["street"]}/{address["house"]}/{address["flat"]}'
    text_desc_address = f'–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª.{address["street"]}, –¥.{address["house"]}, –∫–≤.{address["flat"]}'
    desc_product = '; '.join(f'{key}: {value}—à—Ç.' for key, value in desc_name_quantity.items())

    #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∑–∞–∫–∞–∑–∞
    try:
        await save_order(message.from_user.id, address_d, desc_name_quantity, total_cost)
    except Exception as ex:
        price(ex)
    finally:
        await state.clear()

    id_tovar = await tovar_last(message.from_user.id)
    data_id = int(id_tovar[-1][0])

    await message.answer('–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1111 1111 1111 1026\n–ú–ú/–ì–ì: 12/22\nCVC: 000\n\n–î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!')

    await message.answer_invoice(title=text_desc_address, description=desc_product, payload=f'month_sub_{data_id}', provider_token=config.TOKEN_YOUCASSA, currency='RUB', start_parameter='test_pay', prices=[{'label': '–†—É–±', 'amount': f"{total_cost * 100:.2f}"}])


    await state.clear()

@router.callback_query(StateFilter(default_state), F.data == 'order2')
async def manual_address(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Location2.street)
    await callback.answer()

@router.message(StateFilter(Location2.street))
async def user_street(message: Message, state: FSMContext):
    await state.update_data(street=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Location2.house)

@router.message(StateFilter(Location2.house))
async def user_house(message: Message, state: FSMContext):  
    await state.update_data(house=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Location2.flat)

@router.message(StateFilter(Location2.flat))
async def payment_after_receipt(message: Message, state: FSMContext):
    await state.update_data(flat=message.text)
    address = await state.get_data()
    payment_con = await payment_cart(message.from_user.id)
    quantity = [item[1] for item in payment_con]
    content = [await product_name_desc_price(item[0]) for item in payment_con]
    price = [item[0][1] for item in content]
    name_prod = [item[0][0] for item in content]
    desc_name_quantity = dict(zip(name_prod, quantity))
    total_cost = sum([float(i * quantity[idx])  for idx, i in enumerate(price)])
    address_d = f'{address["street"]}/{address["house"]}/{address["flat"]}'
    text_desc_address = f'–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª.{address["street"]}, –¥.{address["house"]}, –∫–≤.{address["flat"]}'
    desc_product = ';\n'.join(f'{key}: {value}—à—Ç.' for key, value in desc_name_quantity.items())

    await message.answer(f"{text_desc_address}\n\n–í–∞—à –∑–∞–∫–∞–∑:{desc_product}\n\n–û–ë–©–ê–Ø –°–£–ú–ú–ê: {total_cost * 100:.2f} RUB")

    #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∑–∞–∫–∞–∑–∞
    try:
        await save_order(message.from_user.id, address_d, desc_name_quantity, total_cost)
        await clear_cart_pr(message.from_user.id)
        id_order = await last_order(message.from_user.id)
        index = id_order.all()[-1][0]
        content = await desc_order(index)
        content = content[0]
        pos = '\n'.join([f'{k}: {v} —à—Ç.' for k, v in content[3].items()])
        await message.bot.send_message(chat_id=config.ADMIN_ID, text=f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {message.from_user.first_name}\n\n{content[1]}\n\n{pos}\n\nüí∏ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {content[4]} RUB\n\n‚ôªÔ∏è –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´: {content[5]}', reply_markup=await kb_state_1(index, message.from_user.id))
    except Exception as ex:
        price(ex)
    finally:
        await state.clear()

    await state.clear()
    await message.answer('–¢–æ–≤–∞—Ä –æ—Ñ–æ—Ä–º–ª–µ–º!\n\n–û–∂–∏–¥–∞–π—Ç–µ... –ê–¥–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—å—Å—è', reply_markup=await kb_menu())

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout: types.PreCheckoutQuery):
    await pre_checkout.answer(ok=True)

@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: Message):
    if message.successful_payment.invoice_payload.startswith('month_sub'):
        index = message.successful_payment.invoice_payload.split('_')[-1]
        await payment_confirmation(message.from_user.id, int(index))
        await clear_cart_pr(message.from_user.id)
        content = await desc_order(index)
        content = content[0]
        pos = '\n'.join([f'{k}: {v} —à—Ç.' for k, v in content[3].items()])
        await message.bot.send_message(chat_id=config.ADMIN_ID, text=f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {message.from_user.first_name}\n\n{content[1]}\n\n{pos}\n\nüí∏ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {content[4]} RUB\n\n‚ôªÔ∏è –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´: {content[5]}', reply_markup=await kb_state_1(index, message.from_user.id))
        await message.answer('–¢–æ–≤–∞—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ... –ê–¥–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—å—Å—è', reply_markup=await kb_menu())
    elif message.successful_payment.invoice_payload.startswith('pay_order/'):
        ord_id = message.successful_payment.invoice_payload.split('/')[-1]
        if await flag_payment(ord_id):
            await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ', reply_markup=await kb_menu())
        

@router.message(F.text.endswith('–ú–æ–∏ –∑–∞–∫–∞–∑—ã'))
async def my_orders(message: Message):
    orders = await lst_my_orders(message.from_user.id)
    if orders:

        await message.answer('–ú–æ–∏ –∑–∞–∫–∞–∑—ã!\nüü¢ - –û–ø–ª–∞—á–µ–Ω–æ   üî¥ - –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ', reply_markup=await kb_my_orders(orders))
    else:
        await message.answer('<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∑–∞–∫–∞–∑–æ–≤</b>\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üìã –ú–µ–Ω—é', reply_markup=await kb_menu())

@router.callback_query(F.data.startswith('cancle-order'))
async def my_orders(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[-1])
    orders = await cancle_my_orders(user_id)
    if orders:
        await callback.message.edit_text('–ú–æ–∏ –∑–∞–∫–∞–∑—ã!\nüü¢ - –û–ø–ª–∞—á–µ–Ω–æ   üî¥ - –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ', reply_markup=await kb_my_orders(orders))
    else:
        await callback.message.answer('<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∑–∞–∫–∞–∑–æ–≤</b>\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ #–≤ üìã –ú–µ–Ω—é', reply_markup=await kb_menu())

@router.callback_query(F.data.startswith('ordders_'))
async def ordders_(callback: CallbackQuery):
    id_order = int(callback.data.split('_')[-1])
    user_id = int(callback.data.split('_')[-2])
    content = await desc_order(id_order)
    content = content[0]
    pos = '\n'.join([f'{k}: {v} —à—Ç.' for k, v in content[3].items()])
    await callback.message.edit_text(f'{content[1]}\n\n{pos}\n\n–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {content[4]} RUB', reply_markup=await one_pos_order(content[0], content[5], user_id))
    await callback.answer()

@router.callback_query(F.data.startswith('pay_'))
async def order_payment_one(callback: CallbackQuery):
    await callback.message.delete()
    id_ = int(callback.data.split('_')[-1])
    content = await pay_content(id_)
    
    sp_address = content[0].split('/')
    address = f'—É–ª.{sp_address[0]}, –¥.{sp_address[1]}, –∫–≤.{sp_address[2]}'
    order = ', '.join([f'{k}: {v} —à—Ç.' for k, v in content[1].items()])

    await callback.message.answer_invoice(title=address, description=order, payload=f'pay_order/{id_}', provider_token=config.TOKEN_YOUCASSA, currency='RUB', start_parameter='test_pay', prices=[{'label': '–†—É–±', 'amount': f"{content[2] * 100:.2f}"}])



@router.message()
async def cmd_echo(message: Message):
    await message.answer('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞/—Ç–µ–∫—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –≤—ã –ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é-—Ç–æ –µ—Ä—É–Ω–¥—É –∏ –±–æ—Ç –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç ü•¥')