from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from app.keyboards.reply_kb import kb_menu_admin
from app.keyboards.inline_kb import categories, non_categor, users_inline_buttons
from app.database.requests import *
from app.FSM.fsm import Update_product, Add_categories
from app.filters.filter import CheckImageFilter, IsDigitFilter
from app.middlewares.middlewares import Is_Admin


admin = Router()

admin.message.middleware(Is_Admin())

@admin.message(Command('admin'), StateFilter(default_state))
async def cmd_admin(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç —Ö–æ–∑—è–∏–Ω', reply_markup=await kb_menu_admin())

@admin.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='üö´ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ'
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()
    
@admin.message(F.text.endswith('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'))
async def cmd_add_product(message: Message):
    if await output_categories():
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await categories())
    else:
        await message.answer('–ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ‚¨áÔ∏è', reply_markup=non_categor)

@admin.callback_query(F.data == 'add_categor', StateFilter(default_state))
async def but_add_categ(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Add_categories.name)
    await callback.answer()

@admin.message(StateFilter(Add_categories.name))
async def cmd_categ_name(message: Message, state: FSMContext):
    data = await state.update_data(name=message.text)
    if await add_categories(data['name']):
        await message.answer('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
        await state.clear()
    else:
        await message.answer('üö´ –î–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=await kb_menu_admin())
        await state.clear()

@admin.callback_query(F.data.startswith('categ_'), StateFilter(default_state))
async def product_categ(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.name)
    await state.update_data(id_categ=int(callback.data[-1]))
    await callback.answer()

@admin.message(StateFilter(Update_product.name))
async def cmd_name_product(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.image)

@admin.message(StateFilter(Update_product.image), CheckImageFilter())
async def cmd_image_product(message: Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.description)

@admin.message(StateFilter(Update_product.description))
async def cmd_description_product(messsage: Message, state: FSMContext):
    await state.update_data(description=messsage.text)
    await messsage.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–π—Å/—Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.price)

@admin.message(StateFilter(Update_product.price), IsDigitFilter())
async def cmd_price_product(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    product = await state.get_data()
    await message.answer_photo(product['image'])
    await message.answer(f"<b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {product['name']}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</i></b> {product['description']}\n\n<b><i>–ü—Ä–∞–π—Å:</i></b> {product['price']} BYN")
    if await add_product_db(message.from_user.id, product):
        await message.answer('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb_menu_admin())
        await state.clear()
    else:
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        await state.clear()

@admin.message(F.text.endswith('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
async def settings_admin(message: Message):
    if await users():
        await message.answer(text='üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', reply_markup=await users_inline_buttons())
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')